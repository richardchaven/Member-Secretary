<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ns2="view.*" layout="absolute"
				creationComplete="init(event)" xmlns:ns1="com.santacruzsoftware.controls.*" currentState="NO SERVER">
	<mx:states>
		<mx:State name="NO SERVER">
			<mx:AddChild relativeTo="{BackdropCanvas}" position="lastChild">
				<mx:Button right="10" id="CheckServerButton" visible="true" top="5" label="check server"
						   click="checkServer(event)" />
			</mx:AddChild>
		</mx:State>
		<mx:State name="CHECKING SERVER">
			<mx:AddChild relativeTo="{BackdropCanvas}" position="lastChild">
				<mx:Text right="10" id="CheckingServerText" visible="true" top="5" text="checking server" />
			</mx:AddChild>
		</mx:State>
		<mx:State name="NOT LOGGED IN" >
			<mx:AddChild relativeTo="{BackdropCanvas}" position="lastChild">
				<mx:HBox right="10" borderStyle="none" id="LoginBox" height="20" visible="true" top="5" >
					<mx:Label text="username:" textAlign="right" verticalCenter="0" />
					<mx:TextInput width="100" id="LoginUserNameInput" enabled="true" maxChars="50" editable="true"
								  verticalCenter="0" displayAsPassword="false" height="100%"
								  keyDown="loginKeyDown(event)" text="{_userName}"
								  toolTip="This is case-sensitive: make sure you enter it exactly as you registered" />
					<mx:Label text="password:" verticalCenter="0" />
					<mx:TextInput width="70" id="LoginPasswordInput" enabled="true" alpha="1.0" displayAsPassword="true"
								  editable="true" maxChars="25" height="100%" keyDown="loginKeyDown(event)"
								  verticalCenter="0" text="{_password}"
								  toolTip="This is case-sensitive: make sure you enter it exactly as you registered" />
					<mx:Button width="60" id="LoginButton" enabled="true" label="login" height="18" verticalCenter="0" 
						click="attemptLogin()" />
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="ATTEMPTING LOG IN">
			<mx:AddChild relativeTo="{BackdropCanvas}" position="lastChild">
				<mx:Text right="10" id="LogginInText" visible="true" top="5" text="logging in" />
			</mx:AddChild>
		</mx:State>
		<mx:State name="LOGGED IN">
			<mx:AddChild relativeTo="{BackdropCanvas}" position="lastChild">
				<mx:HBox y="10" right="10" id="LoggedinBox" height="20">
					<mx:Label id="loggedInUserName" text="{_userProfile.userName}" textAlign="right" verticalCenter="0" />
					<mx:Button label="logout" id="LogoutButton" enabled="true" click="logout()" height="18"
							   verticalCenter="0" />
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty target="{MasterTabs}" name="visible" value="true" />
			<mx:SetProperty target="{ProgramTitleLabel}" name="x" value="155" />
			<mx:SetProperty target="{ProgramTitleLabel}" name="y" value="10" />
		</mx:State>
	</mx:states>

	<mx:Style source="../assets/MemberSecretary.css" />
	<mx:Binding source="LoginUserNameInput.text" destination="_userName" />
	<mx:Binding source="LoginPasswordInput.text" destination="_password" />

	<mx:Script>
		<![CDATA[
			import model.data.DataServices;
			import view.LookupDataTabs;
			import mx.rpc.remoting.RemoteObject;
			import model.UserProfile;
			import com.gsolo.encryption.SHA1;
			import mx.rpc.AbstractOperation;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.managers.CursorManager;

			import mx.controls.Alert;
			import model.CoreObjects;

			import com.gsolo.encryption.SHA1;

			import com.santacruzsoftware.util.DateTimeUtilities;

			static internal const DEFAULT_GENERAL_MESSAGE_TIMEOUT_SECONDS : uint = 10;
			static internal const DEFAULT_GENERAL_MESSAGE_COLOR : int = 0xCC0000;

			static public const LOGGED_IN : String = "LoggedIn";
			static public const LOGGED_OUT : String = "LoggedOut";

			[Event(name="LoggedIn", type = "mx.events.Event")]
			[Event(name="LoggedOut", type = "mx.events.Event")]
			
			[Bindable]
			private var _userName : String = "";
			[Bindable]
			private var _password : String = "";
			[Bindable]
			private var _statusMessage : String = "";

			private function init(event : Event) : void
			{
				if (LogoImage.source == null)
				{
					trace('../assets/MemberSecretary.css gives getStyle("logo") of ' + this.getStyle("logo"));
					LogoImage.source = this.getStyle("logo");
				}

				this.addEventListener(LOGGED_IN, onLogin);
				this.addEventListener(LOGGED_OUT, onLogout);

				_userName = Application.application.parameters['username'];
				_password = Application.application.parameters['password'];
				
				this.checkServer();
			}

			private function checkServer(event : Event = null) : void
			{
				this.currentState = "CHECKING SERVER";
				this.GeneralMessageText.clear();
				DataServices.getServerVersion(serverCheckSuccessful, serverCheckFailure);
			}

			private function serverCheckSuccessful(event : ResultEvent) : void
			{
				this.currentState = "NOT LOGGED IN";
				
				this.attemptLogin("", "");
			}

			private function serverCheckFailure(event : FaultEvent) : void
			{
				this.currentState = "NO SERVER";
				this.showMessage('The server is not available\n' + event.fault.faultString);
			}

			private function onLogin(event : Event) : void
			{
				this.MasterTabs.selectedIndex = 0;
				this.logSession("Logged in as " + _userProfile.userName);

				this.loadLookupData();
			}

			private function onLogout(event : Event) : void
			{
				//	empty
			}

			private var _queuedSessionLog : String = "";

			public function logSession(aMessage : String) : void
			{
				var now : Date = new Date();
				aMessage = now.toString() + ' - ' + aMessage;

				if (SessionLogTextArea != null)
					SessionLogTextArea.text += aMessage + "\n";
				else
					_queuedSessionLog += aMessage + "\n";
			}

			public function get core() : CoreObjects
			{
				return _core
			}
			private var _core : CoreObjects;

			private function loginKeyDown(event : KeyboardEvent) : void
			{
				if (event.charCode == Keyboard.ENTER)
					attemptLogin();
			}

			private static const MISSING_USER_NAME_MESSAGE : String = "Please enter your user name";
			private static const MISSING_PASSWORD_MESSAGE : String = "Please enter your password";
			
			private function attemptLogin(aMissingUserNameMessage : String = MISSING_USER_NAME_MESSAGE, 
				aMissingPasswordMessage : String = MISSING_PASSWORD_MESSAGE) : Boolean
			{
				if (_userName == "")
				{
					if (LoginUserNameInput != null)
						LoginUserNameInput.setFocus();
					if (aMissingUserNameMessage != "")
						this.showMessage(aMissingUserNameMessage);
					return false;
				}
				else if (_password == "")
				{
					if (LoginPasswordInput != null)
						LoginPasswordInput.setFocus();
					if (aMissingPasswordMessage != "")
						this.showMessage(aMissingPasswordMessage);
					return false;
				}
				else
				{
					this.login(_userName, _password);
					return true;
				}
			}

			[Bindable]
			private var _userProfile : UserProfile = null;

			private function login(aUserName : String, aPassword : String) : void
			{
				this.GeneralMessageText.clear();

				this.currentState = "ATTEMPTING LOG IN";	//	logout will set currentState; this must follow
				
				_userProfile = new UserProfile();
				_userProfile.userName = aUserName;

				DataServices.login(aUserName, aPassword, loginResult, loginFault);
			}

			/*
			   For example, if the password was "password"
			   the hashed password is 5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8
			   the seed might be 1240179653158
			   the rehashed password is aa6ecb057e71f5dacc02492286057e239770b254
			 */
			private function loginResult(event : ResultEvent) : void
			{
				this.currentState = "LOGGED IN";

				_userProfile.sessionStartTime = new Date();

				_userName = '';
				_password = '';

				trace("loginResult.message - " + event.message.toString());

				if (event.result != null)
				{
					trace("loginResult.result - " + event.result.toString());

					_userProfile.userName = event.result['user name'];
					var $timeText : String = event.result['user expires text'];
					_userProfile.userExpireTime = DateTimeUtilities.String8601ToDate($timeText);
					_userProfile.personId = event.result['person id'];
					_userProfile.roles = new Array(event.result['roles']);
				}

				this.dispatchEvent(new Event(LOGGED_IN));
				this.validateNow(); //	try and get the session log page up
				this.logMessage("logged in as " + _userProfile.userName);
			}

			private function loginFault(event : FaultEvent) : void
			{
				this.logMessage("bad login");
				this.currentState = "NOT LOGGED IN";
				_userProfile = null;
				_password = "";
				
				if (LoginUserNameInput != null)
					LoginUserNameInput.setFocus();
					
				this.generalServerFault(event);
			}

			private function logout() : void
			{
				this.logMessage("logout");
				_userName = '';
				_password = '';
				_userProfile = null;
				this.currentState = "NOT LOGGED IN";

				DataServices.logout();

				this.dispatchEvent(new Event(LOGGED_OUT));
			}

			protected function loadLookupData(event : Event = null) : void
			{
				_core = new CoreObjects();
				_core.loadLookupData();
			}

			private function setLookupDataResult(event : ResultEvent) : void
			{
				_core.updateObject.clear();

				Alert.show(event.result.toString());
			}

			private function generalServerFault(event : FaultEvent) : void
			{
				var faultMessage : String = "ERROR: Message: " + event.fault.faultString + " Detail: " + event.fault.faultDetail;
				if (event.fault.faultCode)
					faultMessage += " Code: " + event.fault.faultCode;

				this.showMessage(faultMessage);
			}

			private function showMessage(aMessage : String, timeoutSeconds : uint = 10) : void
			{
				this.GeneralMessageText.showMessage(aMessage, timeoutSeconds);
				this.logMessage(aMessage);
			}

			private var _queuedMessages : String = "";

			private function logMessage(aMessage : String) : void
			{
				if (SessionLogTextArea != null)
				{
					if (SessionLogTextArea.length == 0)
					{
						SessionLogTextArea.text = _queuedMessages;
						_queuedMessages = null;
					}
					this.SessionLogTextArea.text += "\n" + new Date().toLocaleDateString() + ' - ' + aMessage;
				}
				else
					_queuedMessages += "\n" + new Date().toLocaleDateString() + ' - ' + aMessage;
			}
		]]>
	</mx:Script>

	<mx:Canvas id="BackdropCanvas" width="100%" height="100%" backgroundColor="#CBC4C4" backgroundAlpha="1.0">
		<mx:Image x="0" y="0" width="200" height="60" id="LogoImage" source="../assets/logo.jpg" scaleContent="true"
				  autoLoad="true" />
		<mx:Label left="205" top="25" text="Member Secretary" fontFamily="Verdana" fontWeight="bold" fontSize="24"
				  id="ProgramTitleLabel" />
		<ns1:TimedMessage id="GeneralMessageText" left="450" right="5" top="35" maxHeight="120" borderStyle="none"
						  height="60" />

		<mx:TabNavigator left="5" right="5" top="75" bottom="5" id="MasterTabs" visible="false" creationPolicy="queued">
			<mx:Canvas label="Members" width="100%" height="100%" id="MembersCanvas">
			</mx:Canvas>
			<mx:Canvas label="Events" width="100%" height="100%" id="EventsCanvas">
			</mx:Canvas>
			<mx:Canvas label="Inventory" width="100%" height="100%" id='InventoryCanvas'>
			</mx:Canvas>
			<mx:Canvas label="Lookup Values" width="100%" height="100%" id="LookupValuesCanvas">
				<ns2:LookupDataTabs id="LookupValueTabs" width="100%" height="100%"
									creationComplete="LookupValueTabs.core = _core" />
			</mx:Canvas>
			<mx:Canvas label="Session Log" width="100%" height="100%" id="SessionLogCanvas">
				<mx:TextArea wordWrap="true" id="SessionLogTextArea" height="100%" width="100%"
							 creationComplete="SessionLogTextArea.text = _queuedSessionLog" />
			</mx:Canvas>
		</mx:TabNavigator>
	</mx:Canvas>
</mx:Application>
